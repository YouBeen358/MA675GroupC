# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Group age into pre-pubescent (0–11) and post-pubescent (12+)
data$AgeGroup <- ifelse(data$Age <= 11, "Pre-pubescent", "Post-pubescent")
# Convert the new variable to a factor for modeling
data$AgeGroup <- factor(data$AgeGroup, levels = c("Pre-pubescent", "Post-pubescent"))
# Update the Poisson regression model with AgeGroup
poisson_model_updated <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverResidencyDuration + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = poisson(link = "log"),
data = data
)
# Compute the ratio
data$Unrelated_to_Related <- with(data, ifelse(Count_related == 0, NA, Count_unrelated / Count_related))
# Check for missing values due to division by zero
summary(data$Unrelated_to_Related)
# Update the Poisson regression model
poisson_model_updated <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration + Unrelated_to_Related,
family = poisson(link = "log"),
data = data
)
# Summary of the updated model
summary(poisson_model_updated)
# Check for overdispersion in the updated model
library(AER)
dispersiontest(poisson_model_updated)
# Group age into pre-pubescent (0–11) and post-pubescent (12+)
data$AgeGroup <- ifelse(data$Age <= 11, "Pre-pubescent", "Post-pubescent")
# Convert the new variable to a factor for modeling
data$AgeGroup <- factor(data$AgeGroup, levels = c("Pre-pubescent", "Post-pubescent"))
# Update the Poisson regression model with AgeGroup
poisson_model_updated <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverResidencyDuration + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = poisson(link = "log"),
data = data
)
# Summary of the updated model
summary(poisson_model_updated)
# Check for overdispersion in the updated model
library(AER)
dispersiontest(poisson_model_updated)
library(MASS)
nb_model <- glm.nb(Partners_count ~ Age + Sex + CaregiverResidencyDuration + Unrelated_to_Related + Count_unrelated_noadult + Sex:Count_unrelated_noadult, data = data)
summary(nb_model)
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Unrelated_to_Related,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
quasi_poisson_model_interaction <- glm(
Partners_count ~ AgeGroup * Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model_interaction)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
quasi_poisson_model_interaction <- glm(
Partners_count ~ AgeGroup * Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model_interaction)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
quasi_poisson_model_interaction <- glm(
Partners_count ~ AgeGroup * Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model_interaction)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverResidencyDuration +
Unrelated_to_Related + Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model with new reference level
summary(quasi_poisson_model_releveled)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverResidencyDuration +
Unrelated_to_Related + Count_unrelated_noadult + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model with new reference level
summary(quasi_poisson_model_releveled)
library(car)
vif(quasi_poisson_model)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverResidencyDuration +
Unrelated_to_Related + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model with new reference level
summary(quasi_poisson_model_releveled)
library(car)
vif(quasi_poisson_model)
library(splines)
quasi_poisson_model_nonlinear <- glm(
Partners_count ~ bs(CaregiverResidencyDuration, df = 3) + Sex + AgeGroup +
Unrelated_to_Related + Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model_nonlinear)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate +
Unrelated_to_Related + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model with new reference level
summary(quasi_poisson_model_releveled)
library(car)
vif(quasi_poisson_model)
data$Count_unrelated_noadult <- scale(data$Count_unrelated_noadult)
data$Unrelated_to_Related <- scale(data$Unrelated_to_Related)
data$Sex <- relevel(factor(data$Sex), ref = "F")
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrate + Unrelated_to_Related +
Count_unrelated_noadult ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult + Sex:CaregiverImmigrateYearCategory,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:CaregiverImmigrateYearCategory,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult + Sex:AgeGroup,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult + AgeGroup:Unrelated_toRelated,
family = quasipoisson(link = "log"),
data = data
)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult + AgeGroup:Unrelated_to_Related,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
# Create a new variable for categorized Caregiver Immigration Year
data$CaregiverImmigrateYearCategory <- ifelse(
data$CaregiverImmigrateYear < 2013,
"Before 2013",
"2013 or more recent"
)
# Ensure it's a factor with meaningful levels
data$CaregiverImmigrateYearCategory <- factor(
data$CaregiverImmigrateYearCategory,
levels = c("Before 2013", "2013 or more recent")
)
# Fit the updated quasi-Poisson model
quasi_poisson_model_releveled <- glm(
Partners_count ~ AgeGroup + Sex + CaregiverImmigrateYearCategory +
Unrelated_to_Related + Sex:Count_unrelated_noadult + AgeGroup:CaregiverImmigrateYearCategory,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the model
summary(quasi_poisson_model_releveled)
shinyApp(ui, server)
install.packages("shiny")
library(shiny)
install.packages("shiny")
library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
