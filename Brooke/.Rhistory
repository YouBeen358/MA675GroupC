theme_minimal()
age_difference_summary <- cleaned_data %>%
group_by(Age.y) %>%
summarise(Mean_Age_Difference = mean(Age_Difference, na.rm = TRUE))
# Print the summary
print(age_difference_summary)
# Create a bar chart of the mean age difference by age of the interviewed participant
ggplot(age_difference_summary, aes(x = Age.y, y = Mean_Age_Difference)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Mean Age Difference by Age of Interviewed Participant",
x = "Age of Interviewed Participant",
y = "Mean Age Difference (Years)") +
theme_minimal()
# Save the summary to a CSV file (optional)
write.csv(age_difference_summary, "Mean_Age_Difference_by_Interviewed_Age.csv", row.names = FALSE)
age_difference_summary <- cleaned_data %>%
group_by(Age.y) %>%
summarise(Mean_Age_Difference = mean(Age_Difference, na.rm = TRUE))
# Print the summary
print(age_difference_summary)
# Create a bar chart of the mean age difference by age of the interviewed participant
ggplot(age_difference_summary, aes(x = Age.y, y = Mean_Age_Difference)) +
geom_bar(stat = "identity", fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Mean Age Difference by Age of Interviewed Participant",
x = "Age of Interviewed Participant",
y = "Mean Age Difference (Years)") +
theme_minimal()
# Save the summary to a CSV file (optional)
write.csv(age_difference_summary, "Mean_Age_Difference_by_Interviewed_Age.csv", row.names = FALSE)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the cleaned dataset
cleaned_data <- read.csv("Partner_level_with_individual_age.csv")
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the cleaned dataset
cleaned_data <- read.csv("Partner-level_with_individual_age.csv")
# Convert relevant columns to numeric if necessary
cleaned_data$Partners_count <- as.numeric(cleaned_data$Partners_count)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the merged dataset (which includes the age of individuals)
merged_data <- read.csv("Partner-level_with_individual_age.csv")
# Convert Partner_age and Age.y columns to numeric, forcing non-numeric values to NA
merged_data$Partner_age <- as.numeric(merged_data$Partner_age)
merged_data$Age.y <- as.numeric(merged_data$Age.y)
# Remove rows with NA values in either Partner_age or Age.y
cleaned_data <- merged_data %>%
filter(!is.na(Partner_age) & !is.na(Age.y))
# Calculate the age difference between the individual and their partners
cleaned_data <- cleaned_data %>%
mutate(Age_Difference = abs(Age.y - Partner_age))
# Create a histogram of the age differences
ggplot(cleaned_data, aes(x = Age_Difference)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Age Differences between Individual and Playmates",
x = "Age Difference (Years)",
y = "Frequency") +
theme_minimal()
write.csv(cleaned_data, "Cleaned_Partner_level_with_age_difference.csv", row.names = FALSE)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the cleaned dataset
cleaned_data <- read.csv("Cleaned_Partner_level_with_age_difference.csv")
# Convert relevant columns to numeric if necessary
cleaned_data$Partners_count <- as.numeric(cleaned_data$Partners_count)
# Load necessary packages
library(dplyr)
# Load the individual and partner-level datasets
individual_data <- read.csv("Individual-level basic variable.csv")
partner_data <- read.csv("Partner-level basic variables.csv")
# Merge the individual and partner datasets on the 'ID' column
merged_data <- partner_data %>%
left_join(individual_data %>% select(ID, Age), by = "ID")
# Save the merged dataset to a new CSV file
write.csv(merged_data, "Partner-level_with_individual_age.csv", row.names = FALSE)
# View the merged data (optional)
head(merged_data)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the merged dataset (which includes the age of individuals)
merged_data <- read.csv("Partner-level_with_individual_age.csv")
# Convert Partner_age and Age.y columns to numeric, forcing non-numeric values to NA
merged_data$Partner_age <- as.numeric(merged_data$Partner_age)
merged_data$Age.y <- as.numeric(merged_data$Age.y)
# Remove rows with NA values in either Partner_age or Age.y
cleaned_data <- merged_data %>%
filter(!is.na(Partner_age) & !is.na(Age.y))
# Calculate the age difference between the individual and their partners
cleaned_data <- cleaned_data %>%
mutate(Age_Difference = abs(Age.y - Partner_age))
# Create a histogram of the age differences
ggplot(cleaned_data, aes(x = Age_Difference)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histogram of Age Differences between Individual and Playmates",
x = "Age Difference (Years)",
y = "Frequency") +
theme_minimal()
write.csv(cleaned_data, "Cleaned_Partner_level_with_age_difference.csv", row.names = FALSE)
# Load necessary packages
library(dplyr)
library(ggplot2)
# Load the cleaned dataset
cleaned_data <- read.csv("Cleaned_Partner_level_with_age_difference.csv")
# Convert relevant columns to numeric if necessary
cleaned_data$Partners_count <- as.numeric(cleaned_data$Partners_count)
# Load necessary libraries
library(tidyverse)
# Load the dataset
data <- read.csv("Individual-level basic variable.csv")
# Ensure Age and Partners_count are numeric
data$Age <- as.numeric(data$Age)
data$Partners_count <- as.numeric(data$Partners_count)
# Create a new variable for pre-pubescent and post-pubescent
data <- data %>%
mutate(Puberty_Status = ifelse(Age < 12, "Pre-pubescent", "Post-pubescent"))
# Set the factor levels to ensure the desired order
data$Puberty_Status <- factor(data$Puberty_Status, levels = c("Pre-pubescent", "Post-pubescent"))
# Group by Puberty_Status and calculate the mean of Partners_count
puberty_partner_mean <- data %>%
group_by(Puberty_Status) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create a bar plot with the specified order
ggplot(puberty_partner_mean, aes(x = Puberty_Status, y = mean_partners, fill = Puberty_Status)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Puberty Status",
x = "Puberty Status",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Pre-pubescent" = "lightblue", "Post-pubescent" = "lightgreen"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120', '120 or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120", "120 or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120" = "lightblue", "120 or Above" = "lightgreen"))
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Playmate Gender and Playmate Count are correctly formatted
partner_data$Playmate_Gender <- as.factor(partner_data$Playmate_Gender)
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n())
# Create a boxplot for male and female playmates
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("Female" = "lightpink", "Male" = "lightblue"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
unique(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n())
# Create a boxplot for male and female playmates
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("Female" = "lightpink", "Male" = "lightblue"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n(), .groups = "drop")  # Suppress the grouping message
# Create a boxplot for male and female playmates, using the correct factor levels
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("F" = "lightpink", "M" = "lightblue"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n(), .groups = "drop")  # Suppress the grouping message
# Create a boxplot for male and female playmates, extending the y-axis to 10
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("F" = "lightpink", "M" = "lightblue")) +
ylim(0, 10)  # Set y-axis limit from 0 to 10
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n(), .groups = "drop")  # Suppress the grouping message
# Create a boxplot for male and female playmates, extending the y-axis to 10
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("F" = "lightpink", "M" = "lightblue")) +
ylim(0, 16)  # Set y-axis limit from 0 to 10
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n(), .groups = "drop")  # Suppress the grouping message
# Create a boxplot for male and female playmates, extending the y-axis to 10
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("F" = "lightpink", "M" = "lightblue"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120', '120 or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120", "120 or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120 months" = "lightblue", "120 months or Above" = "lightgreen"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120', '120 or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120 months", "120 months or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120 months" = "lightblue", "120 months or Above" = "lightgreen"))
# Load necessary libraries
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120 months', '120 months or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120 months", "120 months or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120 months" = "lightblue", "120 months or Above" = "lightgreen"))
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure CaregiverResidencyDuration is numeric
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Calculate the mean of CaregiverResidencyDuration
mean_residency_duration <- mean(df$CaregiverResidencyDuration, na.rm = TRUE)
# Print the mean
print(mean_residency_duration)
library(tidyverse)
# Load the dataset
df <- read.csv("Individual-level basic variable.csv")
# Ensure CaregiverResidencyDuration is numeric
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Get the summary of CaregiverResidencyDuration
summary_residency_duration <- summary(df$CaregiverResidencyDuration)
# Print the summary
print(summary_residency_duration)
# Calculate the mean of CaregiverResidencyDuration
mean_residency_duration <- mean(df$CaregiverResidencyDuration, na.rm = TRUE)
# Print the mean
print(mean_residency_duration)
# Load necessary libraries
library(tidyverse)
# Load the dataset
partner_data <- read.csv("Partner-level basic variables.csv")
# Ensure Partner_sex is a factor and group by ID for playmate count
partner_data$Partner_sex <- as.factor(partner_data$Partner_sex)
# Create a new variable to count the number of playmates by ID and Partner_sex
playmate_count <- partner_data %>%
group_by(ID, Partner_sex) %>%
summarise(Playmate_Count = n(), .groups = "drop")  # Suppress the grouping message
# Create a boxplot for male and female playmates, extending the y-axis to 10
ggplot(playmate_count, aes(x = Partner_sex, y = Playmate_Count, fill = Partner_sex)) +
geom_boxplot() +
labs(title = "Boxplot of Playmate Count by Gender",
x = "Playmate Gender",
y = "Playmate Count") +
theme_minimal() +
scale_fill_manual(values = c("F" = "lightpink", "M" = "lightblue"))
df <- read.csv("Individual-level basic variable.csv")
# Load necessary library
library(ggplot2)
# Assuming you have already read the dataset
# df <- read.csv("path_to/Individual-level basic variable.csv")
# Create a boxplot for gender (Sex) and visualize any numeric variable, e.g., Age
ggplot(df, aes(x = as.factor(Sex), y = Age)) +
geom_boxplot() +
labs(x = "Gender", y = "Age") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming you have already read the dataset
# df <- read.csv("path_to/Individual-level basic variable.csv")
# Create a boxplot with specific colors for male and female
ggplot(df, aes(x = as.factor(Sex), y = Age, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("1" = "lightblue", "2" = "lightpink")) + # Adjust as needed
labs(x = "Gender", y = "Age", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Assuming you have already read the dataset
# df <- read.csv("path_to/Individual-level basic variable.csv")
# Create a boxplot with specific colors for male and female
ggplot(df, aes(x = as.factor(Sex), y = Age, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("1" = "lightblue", "2" = "lightpink")) + # Adjust as needed
labs(x = "Gender", y = "Age", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
unique(df$Sex)
# df <- read.csv("path_to/Individual-level basic variable.csv")
# Create a boxplot with specific colors for male and female
ggplot(df, aes(x = as.factor(Sex), y = Age, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("1" = "lightblue", "2" = "lightpink")) + # Adjust as needed
labs(x = "Gender", y = "Age", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
unique(df$Sex)
df <- read.csv("path_to/Individual-level basic variable.csv")
# Load necessary library
library(ggplot2)
unique(df$Sex)
df <- read.csv("Individual-level basic variable.csv")
# Create a boxplot with specific colors for male ("M") and female ("F")
ggplot(df, aes(x = as.factor(Sex), y = Age, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "lightblue", "F" = "lightpink")) +
labs(x = "Gender", y = "Age", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
unique(df$Sex)
df <- read.csv("Individual-level basic variable.csv")
# Create a boxplot with specific colors for male ("M") and female ("F")
# Create a bar plot showing the number of interviewees by gender
ggplot(df, aes(x = as.factor(Sex), fill = as.factor(Sex))) +
geom_bar() +
scale_fill_manual(values = c("M" = "lightblue", "F" = "lightpink")) +
labs(x = "Gender", y = "Number of Interviewees", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
unique(df$Sex)
df <- read.csv("Individual-level basic variable.csv")
# Create a boxplot for gender (Sex) and number of playmates
ggplot(df, aes(x = as.factor(Sex), y = NumberOfPlaymates, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "lightblue", "F" = "lightpink")) +
labs(x = "Gender", y = "Number of Playmates", fill = "Gender") +
theme_minimal()
# Load necessary library
library(ggplot2)
unique(df$Sex)
df <- read.csv("Individual-level basic variable.csv")
# Create a boxplot for gender (Sex) and number of playmates (Partners_count)
ggplot(df, aes(x = as.factor(Sex), y = Partners_count, fill = as.factor(Sex))) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "lightblue", "F" = "lightpink")) +
labs(x = "Gender", y = "Number of Playmates", fill = "Gender") +
theme_minimal()
# Load necessary libraries
library(tidyverse)
# Load the dataset
data <- read.csv("Individual-level basic variable.csv")
# Ensure Age, Partners_count, and Sex are in the correct format
data$Age <- as.numeric(data$Age)
data$Partners_count <- as.numeric(data$Partners_count)
data$Sex <- as.factor(data$Sex)  # Make sure Sex is a factor (M/F)
# Group by Age and Sex, then calculate the mean of Partners_count
age_sex_partner_mean <- data %>%
group_by(Age, Sex) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Ensure all combinations of Age and Sex are present, even if no data exists
age_sex_full <- age_sex_partner_mean %>%
complete(Age, Sex, fill = list(mean_partners = NA))
# Load necessary libraries
library(tidyverse)
# Load the dataset
data <- read.csv("Individual-level basic variable.csv")
# Ensure Age, Partners_count, and Sex are in the correct format
data$Age <- as.numeric(data$Age)
data$Partners_count <- as.numeric(data$Partners_count)
data$Sex <- as.factor(data$Sex)  # Make sure Sex is a factor (M/F)
# Group by Age and Sex, then calculate the mean of Partners_count
age_sex_partner_mean <- data %>%
group_by(Age, Sex) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE), .groups = "drop")
# Ensure all combinations of Age and Sex are present, even if no data exists
age_sex_full <- age_sex_partner_mean %>%
tidyr::complete(Age, Sex, fill = list(mean_partners = NA))
# Create a bar plot with divided bars for Males and Females
ggplot(age_sex_full, aes(x = Age, y = mean_partners, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge", na.rm = FALSE) +
labs(title = "Mean Partners Count by Age and Sex",
x = "Age",
y = "Mean Partners Count",
fill = "Sex") +
theme_minimal()
