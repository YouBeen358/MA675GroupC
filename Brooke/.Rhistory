# Summary of the updated model
summary(poisson_model_updated)
# Check for overdispersion in the updated model
library(AER)
dispersiontest(poisson_model_updated)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:Age,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:UserLanguage,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage ,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage ,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(data.table)
library(MASS)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Load necessary libraries
library(data.table)
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Load necessary libraries
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Ensure columns are numeric
data$Partners_count <- as.numeric(data$Partners_count)
data$Age <- as.numeric(data$Age)
data$CaregiverResidencyDuration <- as.numeric(data$CaregiverResidencyDuration)
# Subset numeric variables
num_vars <- data %>%
dplyr::select(Partners_count, Age, CaregiverResidencyDuration)
# Compute the correlation matrix
cor_matrix <- cor(num_vars, use = "complete.obs")
# Visualize the heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix, lab = TRUE, hc.order = TRUE, colors = c("blue", "white", "red"))
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration + UserLanguage,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
library(AER)
dispersiontest(poisson_model)
# Load necessary libraries
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(AER)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
dispersiontest(poisson_model)
# Ensure columns are numeric
data$Partners_count <- as.numeric(data$Partners_count)
data$Age <- as.numeric(data$Age)
data$CaregiverResidencyDuration <- as.numeric(data$CaregiverResidencyDuration)
# Subset numeric variables
num_vars <- data %>%
dplyr::select(Partners_count, Age, CaregiverResidencyDuration)
# Compute the correlation matrix
cor_matrix <- cor(num_vars, use = "complete.obs")
# Visualize the heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix, lab = TRUE, hc.order = TRUE, colors = c("blue", "white", "red"))
library(MASS)
nb_model <- glm.nb(Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate, data = data)
summary(nb_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
dispersiontest(poisson_model)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(tidyverse)
# Load the dataset
data <- read.csv("Individual-level basic variable.csv")
# Ensure Age and Partners_count are numeric
data$Age <- as.numeric(data$Age)
data$Partners_count <- as.numeric(data$Partners_count)
# Load necessary libraries
library(tidyverse)
# Load the dataset
data <- read.csv("Individual-level basic variable.csv")
# Ensure Age and Partners_count are numeric
data$Age <- as.numeric(data$Age)
data$Partners_count <- as.numeric(data$Partners_count)
# Group by Age and calculate the mean of Partners_count
age_partner_mean <- data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create a bar plot
ggplot(age_partner_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Age",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
data$Sex <- as.factor(data$Sex)  # Make sure Sex is a factor (M/F)
# Group by Age and Sex, then calculate the mean of Partners_count
age_sex_partner_mean <- data %>%
group_by(Age, Sex) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE), .groups = "drop")
# Ensure all combinations of Age and Sex are present, even if no data exists
age_sex_full <- age_sex_partner_mean %>%
tidyr::complete(Age, Sex, fill = list(mean_partners = NA))
# Create a bar plot with divided bars for Males and Females
ggplot(age_sex_full, aes(x = Age, y = mean_partners, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge", na.rm = FALSE) +
labs(title = "Mean Partners Count by Age and Sex",
x = "Age",
y = "Mean Partners Count",
fill = "Sex") +
theme_minimal()
data$Sex <- as.factor(data$Sex)  # Make sure Sex is a factor (M/F)
# Group by Age and Sex, then calculate the mean of Partners_count
age_sex_partner_mean <- data %>%
group_by(Age, Sex) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE), .groups = "drop")
# Ensure all combinations of Age and Sex are present, even if no data exists
age_sex_full <- age_sex_partner_mean %>%
tidyr::complete(Age, Sex, fill = list(mean_partners = NA))
# Create a bar plot with divided bars for Males and Females
ggplot(age_sex_full, aes(x = Age, y = mean_partners, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge", na.rm = FALSE) +
labs(title = "Mean Partners Count by Age and Sex",
x = "Age",
y = "Mean Partners Count",
fill = "Sex") +
theme_minimal()
pre_pubescent_data <- data %>% filter(Puberty_Status == "Pre-pubescent")
# Create a new variable for pre-pubescent and post-pubescent
data <- data %>%
mutate(Puberty_Status = ifelse(Age < 12, "Pre-pubescent", "Post-pubescent"))
# Set the factor levels to ensure the desired order
data$Puberty_Status <- factor(data$Puberty_Status, levels = c("Pre-pubescent", "Post-pubescent"))
pre_pubescent_data <- data %>% filter(Puberty_Status == "Pre-pubescent")
post_pubescent_data <- data %>% filter(Puberty_Status == "Post-pubescent")
# Group by Age and calculate the mean of Partners_count for both groups
pre_pubescent_mean <- pre_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
post_pubescent_mean <- post_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plots for both groups
# Pre-pubescent plot
pre_plot <- ggplot(pre_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Mean Partners Count by Age (Pre-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
# Post-pubescent plot
post_plot <- ggplot(post_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Mean Partners Count by Age (Post-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
# Print the plots
print(pre_plot)
print(post_plot)
# Group by Puberty_Status and calculate the mean of Partners_count
puberty_partner_mean <- data %>%
group_by(Puberty_Status) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create a bar plot with the specified order
ggplot(puberty_partner_mean, aes(x = Puberty_Status, y = mean_partners, fill = Puberty_Status)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Puberty Status",
x = "Puberty Status",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Pre-pubescent" = "lightblue", "Post-pubescent" = "lightgreen"))
pre_pubescent_data <- data %>% filter(Puberty_Status == "Pre-pubescent")
post_pubescent_data <- data %>% filter(Puberty_Status == "Post-pubescent")
# Group by Age and calculate the mean of Partners_count for both groups
pre_pubescent_mean <- pre_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
post_pubescent_mean <- post_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plots for both groups
# Pre-pubescent plot
pre_plot <- ggplot(pre_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Mean Partners Count by Age (Pre-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
# Post-pubescent plot
post_plot <- ggplot(post_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Mean Partners Count by Age (Post-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
# Print the plots
print(pre_plot)
print(post_plot)
pre_pubescent_data <- data %>% filter(Puberty_Status == "Pre-pubescent")
post_pubescent_data <- data %>% filter(Puberty_Status == "Post-pubescent")
# Group by Age and calculate the mean of Partners_count for both groups
pre_pubescent_mean <- pre_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
post_pubescent_mean <- post_pubescent_data %>%
group_by(Age) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plots for both groups
# Pre-pubescent plot
pre_plot <- ggplot(pre_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightblue") +
labs(title = "Mean Partners Count by Age (Pre-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal() +
ylim(0, 6)
# Post-pubescent plot
post_plot <- ggplot(post_pubescent_mean, aes(x = Age, y = mean_partners)) +
geom_bar(stat = "identity", fill = "lightgreen") +
labs(title = "Mean Partners Count by Age (Post-pubescent)",
x = "Age",
y = "Mean Partners Count") +
theme_minimal()
# Print the plots
print(pre_plot)
print(post_plot)
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120 months', '120 months or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120 months", "120 months or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120 months" = "lightblue", "120 months or Above" = "lightgreen"))
# Ensure Partners_count and CaregiverResidencyDuration are numeric
df$Partners_count <- as.numeric(df$Partners_count)
df$CaregiverResidencyDuration <- as.numeric(df$CaregiverResidencyDuration)
# Create a new variable for CaregiverResidencyDuration categories
df <- df %>%
mutate(ResidencyCategory = ifelse(CaregiverResidencyDuration < 120, 'Below 120 months', '120 months or Above'))
# Set the factor levels to ensure the desired order
df$ResidencyCategory <- factor(df$ResidencyCategory, levels = c("Below 120 months", "120 months or Above"))
# Group by ResidencyCategory and calculate the mean of Partners_count
residency_partner_mean <- df %>%
group_by(ResidencyCategory) %>%
summarise(mean_partners = mean(Partners_count, na.rm = TRUE))
# Create the bar plot with the specified order
ggplot(residency_partner_mean, aes(x = ResidencyCategory, y = mean_partners, fill = ResidencyCategory)) +
geom_bar(stat = "identity") +
labs(title = "Mean Partners Count by Caregiver Residency Duration",
x = "Caregiver Residency Duration",
y = "Mean Partners Count") +
theme_minimal() +
scale_fill_manual(values = c("Below 120 months" = "lightblue", "120 months or Above" = "lightgreen"))
knitr::opts_chunk$set(echo = TRUE)
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Check the updated dataset
head(data)
# Load necessary libraries
library(data.table)
library(MASS)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model after cleaning
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Add residuals and predicted values to the dataset
data$Residuals <- residuals(poisson_model, type = "response")  # Response residuals
data$Fitted_Values <- fitted(poisson_model)  # Predicted values
# Load ggplot2 for visualization
library(ggplot2)
# Plot residuals vs fitted values
ggplot(data, aes(x = Fitted_Values, y = Residuals)) +
geom_point(alpha = 0.6, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(
title = "Residuals vs Fitted Values",
x = "Fitted Values (Predicted Partners Count)",
y = "Residuals"
) +
theme_minimal()
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
