# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~AgeGroup + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion + AgeGroup:Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~AgeGroup + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion + AgeGroup:Nonadult_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~AgeGroup + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~Age + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~AgeGroup + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~Age + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Group age into pre-pubescent (0â€“11) and post-pubescent (12+)
data$AgeGroup <- ifelse(data$Age <= 11, "Pre-pubescent", "Post-pubescent")
# Convert the new variable to a factor for modeling
data$AgeGroup <- factor(data$AgeGroup, levels = c("Pre-pubescent", "Post-pubescent"))
# Update the Poisson regression model with AgeGroup
poisson_model_updated <- glm(
Partners_count ~ AgeGroup + Sex +
Count_unrelated_noadult + Sex:Count_unrelated_noadult + Same_sex_proportion,
family = poisson(link = "log"),
data = data
)
# Summary of the updated model
summary(poisson_model_updated)
# Check for overdispersion in the updated model
library(AER)
dispersiontest(poisson_model_updated)
data$Nonadult_proportion <- with(data, ifelse(Partners_count == 0, NA, Count_unrelated_noadult / Partners_count))
# Update the model using a quasi-Poisson family
quasi_poisson_model <- glm(
Partners_count ~ CaregiverImmigrate + AgeGroup + Sex +
Nonadult_proportion + Sex:Nonadult_proportion + Same_sex_proportion ,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasi_poisson_model)
# Compare AIC-like metric (quasi-Poisson doesn't have true AIC, but deviance can be used for comparison)
anova(quasi_poisson_model, test = "Chisq")
# Calculate the dispersion parameter manually
dispersion <- sum(residuals(quasi_poisson_model, type = "pearson")^2) / quasi_poisson_model$df.residual
dispersion
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Check the updated dataset
head(data)
# Load necessary libraries
library(data.table)
library(MASS)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
quasi_poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate ,
family = quasipoisson(link = "log"),
data = data
)
quasi_poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate ,
family = quasipoisson(link = "log"),
data = data
)
quasi_poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate ,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Assess model fit (optional)
library(AER)
dispersiontest(poisson_model)
quasi_poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate ,
family = quasipoisson(link = "log"),
data = data
)
summary(quasi_poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
library(MASS)
nb_model <- glm.nb(Partners_count ~Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate, data = data)
summary(nb_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Compute the ratio
data$Unrelated_to_Related <- with(data, ifelse(Count_related == 0, NA, Count_unrelated / Count_related))
# Check for missing values due to division by zero
summary(data$Unrelated_to_Related)
# Update the Poisson regression model
poisson_model_updated <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
UserLanguage + Sex:CaregiverImmigrate + Unrelated_to_Related,
family = poisson(link = "log"),
data = data
)
# Summary of the updated model
summary(poisson_model_updated)
# Check for overdispersion in the updated model
library(AER)
dispersiontest(poisson_model_updated)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:Age,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:UserLanguage,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage ,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age+ Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage ,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(data.table)
library(MASS)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Load necessary libraries
library(data.table)
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Load necessary libraries
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyverse)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
# Ensure columns are numeric
data$Partners_count <- as.numeric(data$Partners_count)
data$Age <- as.numeric(data$Age)
data$CaregiverResidencyDuration <- as.numeric(data$CaregiverResidencyDuration)
# Subset numeric variables
num_vars <- data %>%
dplyr::select(Partners_count, Age, CaregiverResidencyDuration)
# Compute the correlation matrix
cor_matrix <- cor(num_vars, use = "complete.obs")
# Visualize the heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix, lab = TRUE, hc.order = TRUE, colors = c("blue", "white", "red"))
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverResidencyDuration + UserLanguage,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
library(AER)
dispersiontest(poisson_model)
# Load necessary libraries
library(data.table)
library(ggplot2)
library(dplyr)
library(tidyverse)
library(AER)
# Load the dataset
data <- fread("Individual-level basic variable.csv")
# Filter out the 16-year-old girl
data <- subset(data, !(Age == 16 & Sex == "F"))
# Remove rows with NA values in variables used in the model
data <- data %>%
filter(
!is.na(Partners_count) &
!is.na(Age) &
!is.na(Sex) &
!is.na(CaregiverImmigrate) &
!is.na(CaregiverResidencyDuration)
)
# Convert categorical variables to factors
data[, Sex := as.factor(Sex)]
data[, CaregiverImmigrate := as.factor(CaregiverImmigrate)]
data[, UserLanguage := as.factor(UserLanguage)]
# Fit the Poisson regression model
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
dispersiontest(poisson_model)
# Ensure columns are numeric
data$Partners_count <- as.numeric(data$Partners_count)
data$Age <- as.numeric(data$Age)
data$CaregiverResidencyDuration <- as.numeric(data$CaregiverResidencyDuration)
# Subset numeric variables
num_vars <- data %>%
dplyr::select(Partners_count, Age, CaregiverResidencyDuration)
# Compute the correlation matrix
cor_matrix <- cor(num_vars, use = "complete.obs")
# Visualize the heatmap
library(ggcorrplot)
ggcorrplot(cor_matrix, lab = TRUE, hc.order = TRUE, colors = c("blue", "white", "red"))
library(MASS)
nb_model <- glm.nb(Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate, data = data)
summary(nb_model)
poisson_model <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
# Summarize the model
summary(poisson_model)
dispersiontest(poisson_model)
