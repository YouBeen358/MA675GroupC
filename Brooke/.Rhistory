unique_counts <- 0:max(data$Partners_count)
# Compute expected counts for each unique count using individual predicted values
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) {
# Sum probabilities for each unique count across all predicted values
sum(dpois(x, lambda = predicted_counts))
})
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model2 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration ,
family = poisson(link = "log"),
data = data
)
summary(poisson_model2)
dispersiontest(poisson_model2)
# Fit the Poisson regression model
poisson_model2 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Model summary
summary(poisson_model2)
# Test for overdispersion
library(AER)
dispersiontest(poisson_model2)
# Fit the Poisson regression model
poisson_model2 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
# Model summary
summary(poisson_model2)
# Test for overdispersion
library(AER)
dispersiontest(poisson_model2)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverImmigrate,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage ,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:Age,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
Sex:CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
UserLanguage:CaregiverResidencyDuration,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
CaregiverResidencyDuration:UserLanguage,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model2 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model2)
summary(predicted_counts_model3)
poisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
CaregiverResidencyDuration:UserLanguage,
family = poisson(link = "log"),
data = data
)
summary(poisson_model3)
dispersiontest(poisson_model3)
# Observed counts
observed_counts <- table(data$Partners_count)
# Predicted (Expected) counts from the model
predicted_counts <- predict(poisson_model3, type = "response")
# Get unique counts from observed data
unique_counts <- 0:max(data$Partners_count)
# Compute expected counts using individual predicted lambdas
expected_curve <- data.frame(
count = unique_counts,
expected = sapply(unique_counts, function(x) sum(dpois(x, lambda = predicted_counts)))
)
# Add square root of expected counts for plotting
expected_curve$sqrt_expected <- sqrt(expected_curve$expected)
# Create rootogram data with observed counts
rootogram_data <- data.frame(
count = as.numeric(names(observed_counts)),
observed = as.numeric(observed_counts),
sqrt_observed = sqrt(as.numeric(observed_counts))
)
# Merge rootogram data with expected curve data
rootogram_data <- merge(
rootogram_data,
expected_curve,
by = "count",
all.x = TRUE
)
# Plot the rootogram
library(ggplot2)
ggplot(rootogram_data, aes(x = count)) +
geom_bar(aes(y = sqrt_observed), stat = "identity", fill = "blue", alpha = 0.5) +
geom_line(aes(y = sqrt_expected), color = "red", size = 1.2) +
geom_segment(
aes(x = count, xend = count, y = sqrt_observed, yend = sqrt_expected),
color = "black", linetype = "dashed"
) +
theme_minimal() +
labs(
title = "Rootogram with Curved Expected Line",
x = "Count",
y = "Square Root of Frequency"
)
predicted_counts_model1 <- predict(poisson_model2, type = "response")
predicted_counts_model3 <- predict(poisson_model3, type = "response")
summary(predicted_counts_model1)
summary(predicted_counts_model3)
quasipoisson_model3 <- glm(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
CaregiverResidencyDuration:UserLanguage,
family = quasipoisson(link = "log"),
data = data
)
# Summary of the quasi-Poisson model
summary(quasipoisson_model3)
# Calculate the dispersion parameter
dispersion <- sum(residuals(poisson_model3, type = "pearson")^2) / df.residual(poisson_model3)
dispersion
library(MASS)
negbin_model3 <- glm.nb(
Partners_count ~ Age + Sex + CaregiverImmigrate + CaregiverResidencyDuration + UserLanguage +
CaregiverResidencyDuration:UserLanguage,
data = data
)
# Summary of the Negative Binomial model
summary(negbin_model3)
# Dispersion parameter (theta)
negbin_model3$theta
